import bad_epoch
from lxml import etree
import numpy as np
import os
import path
import random
import time

class xml_snippets:
	'''Load all predictions generated by the cnn and link them to the snippet indices of a window object.
	write bad epoch xml to ARTIFACT_DATA_ALL_PP folder.
	IMPORTANT: block start sample are the sample numbers in sf1000, bad epoch st and et sample are in sf 100
	'''
	def __init__(self,w=None,indices= None,artifact_definition_method = 'unk',load_dir = None,save_dir = None,bad_epochs = [],filename = '',coder = 'Martijn'):
		'''Writes artifact info generated with manual_artifact_coder to xml files

		w 			windower object
		indices 	list or np array, 0 = clean 1 = artifact
		artifact.. 	describes method of artifact definition, manual, automatic, threshold
		load_dir 	directory to load data from
		save_dir 	directory to save xml to
		bad_epochs 	a list of bad_epoch objects, can be empty
		filename 	xml filename, for loading or writing
		'''
		self.w= w
		self.indices = indices
		self.artifact_definition_method = artifact_definition_method 
		self.coder = coder
		if load_dir == None: self.load_dir = path.artifact_data_all_pp 
		elif not os.path.isdir(load_dir):
			print('Could not locate:',load_dir,'using default:',path.artifact_data_all_pp)
			self.load_dir = path.artifact_data_all_pp
		if save_dir == None: self.save_dir = path.snippet_annotation
		elif not os.path.isdir(save_dir):
			print('Could not locate:',save_dir,'using default:',path.snippet_annotation)
			self.save_dir = path.snippet_annotation
		if filename != '': self.filename = filename
		else:
			self.filename = make_filename(w,self.save_dir, identifier = self.artifact_definition_method)
			print('no filename specified, generating filename based on windower object:',self.filename)
		if indices: 
			self.set_indices()
			self.make_index_info()
		else: 
			print('No artifact indices set')
			self.snippets = etree.Element('snippets')

	def __str__(self):
		return etree.tostring(self.snippets, pretty_print=True).decode()


	def set_indices(self):
		self.indices_np = np.array(self.indices)
		self.indices = list(self.indices_np)
		self.clean_indices = np.where(self.indices_np == 0)[0]
		self.artifact_indices = np.where(self.indices_np == 1)[0]
		self.other_indices = np.where(self.indices_np == 2)[0]
		self.nclean_indices = len(self.clean_indices)
		self.nartifact_indices = len(self.artifact_indices)
		self.nother_indices = len(self.other_indices)


	def one_hot2indices(self,one_hot_array):
		'''Method to convert one_hot to indices, 0 = clean, 1 = artifact.
		Overrides set_indices()'''
		self.clean_indices = np.where(one_hot_array[:,0]==1)[0]
		self.artifact_indices = np.where(one_hot_array[:,1]==1)[0]
		self.nclean_indices = len(self.clean_indices)
		self.nartifact_indices = len(self.artifact_indices)
		nindices = self.nclean_indices + self.nartifact_indices
		self.indices= [[0] if i in self.clean_indices else [1] for i in range(nindices)]


	def make_index_info(self):
		'''Adds indices (=snippets) from the w object to the xml tree.'''
		self.snippets= etree.Element('snippets')
		ii_xml = etree.SubElement(self.snippets, 'index_info',id = self.w.name)

		self.nclean = str(self.nclean_indices)
		self.nartifact = str(self.nartifact_indices)

		# set epoch info elements
		elements = 'nclean,nartifact,block_st_sample,block_et_sample,pp_id,exp_type,bid,coder'.split(',')
		evalues = [self.nclean,self.nartifact,str(self.w.st_sample),str(self.w.et_sample), str(self.w.pp_id), self.w.exp_type, str(self.w.bid), self.coder]
		for i,e in enumerate(elements):
			element = etree.SubElement(ii_xml, e)
			element.text = evalues[i]


	def xml2index_info(self):
		'''Adds indices (=snippets) from the w object to the xml tree.'''

		ii_xml = self.snippets.find('index_info')
		element_names = 'nclean,nartifact,block_st_sample,pp_id,exp_type,bid,coder'.split(',')
		for e in element_names:
			if ii_xml.find(e) != None:
				setattr(self,e,ii_xml.find(e).text)
			else:
				setattr(self,e,'NA')


	def get_index_info(self):
		'''Load index info into the object.
		Index_info contains information about participant experiment type and block number and block start number.
		'''
		self.index_info = self.snippets.find('index_info')
		# fetch subelements
		element_names = 'nclean,nartifact,block_st_sample,pp_id,bid,exp_type,coder'.split(',')
		for e in element_names:
			print(self.index_info.find(e),e)
			setattr(self,e, self.index_info.find(e).text )


	def make_bad_epoch(self):
		'''Create a list of bad epochs from xml file.'''
		self.bad_epochs = []
		self.get_index_info()
		ws = self.w.windows['sf100']
		for index,value in enumerate(self.indices):
			if not index % int(len(self.indices)/10):print(index,len(self.indices))
			#create start and end boundary
			st_sample, et_sample = ws.start_snippets[index], ws.end_snippets[index]
			start = bad_epoch.Boundary(x = int(st_sample),boundary_type='start',visible = False)
			end = bad_epoch.Boundary(x = int(et_sample),boundary_type='end',visible = False)
			if index in self.clean_indices: annotation = 'clean'
			elif index in self.artifact_indices: annotation = 'artifact'
			elif index in self.other_indices: annotation = 'other'
			else: raise ValueError(index,'not in clean_indices or artifact_indices')
			if hasattr(self,'pred_perc'):perc_clean = self.pred_perc[index,0]
			else: perc_clean = 'NA'
			epoch_id = get_snippet_epoch_id(increment = True)
			# create bad epoch
			be = bad_epoch.Bad_epoch(start_boundary = start, end_boundary = end, annotation = annotation ,pp_id = self.pp_id, exp_type = self.exp_type, bid = self.bid,block_st_sample = self.block_st_sample,block_et_sample = self.block_st_sample,epoch_id = epoch_id,coder = self.coder, correct = 'unk',visible = False ,perc_clean = perc_clean)
			self.bad_epochs.append(be)
		return self.bad_epochs


	def bad_epochs2xml(self):
		'''Create xml file from bad_epochs, adapted from xml_handler, '''
		# self.artifacts = etree.Element('artifacts')
		for be in self.bad_epochs:
			if not be.ok:
				pass
			be_xml = etree.SubElement(self.snippets, 'bad_epoch', id = str(be.epoch_id))
			# set epoch info elements
			elements = 'st_sample,et_sample,duration,block_st_sample,block_et_sample,pp_id,exp_type,bid,color,coder,correct,annotation,perc_clean'.split(',')
			for e in elements:
				element = etree.SubElement(be_xml, e)
				if hasattr(be,e):
					element.text = str(getattr(be,e))
				else:
					element.text = 'NA'


	def xml2bad_epochs(self):
		'''Create a list of bad epochs from xml file.'''
		self.bad_epochs = []
		print('Starting with list of',len(self.artifacts),' bad epochs')
		for be_xml in self.artifacts.iter('bad_epoch'):
			# fetch subelements
			element_names = 'st_sample,et_sample,block_st_sample,pp_id,bid,annotation,color,exp_type,coder,note,correct,corrector,perc_clean'.split(',')
			element_values = []
			for e in element_names:
				if be_xml.find(e) != None:
					element_values.append(be_xml.find(e).text)
				else:
					element_values.append('NA')
			st_sample,et_sample,block_st_sample,pp_id,bid,annotation,color,exp_type,coder,note,correct,corrector,perc_clean= element_values
			epoch_id = be_xml.attrib['id']
			#create start and end boundary
			start = bad_epoch.Boundary(x = int(st_sample),boundary_type='start',visible = False)
			end = bad_epoch.Boundary(x = int(et_sample),boundary_type='end',visible = False)
			# create bad epoch
			be = bad_epoch.Bad_epoch(start_boundary = start, end_boundary = end, annotation = annotation, color = color,pp_id = pp_id, exp_type = exp_type, bid = bid,block_st_sample = block_st_sample,epoch_id = epoch_id, visible = False ,correct = correct,perc_clean = perc_clean)
			self.bad_epochs.append(be)
		print('N bad epoch:',len(self.artifacts),'artifacts')
		return self.bad_epochs


	def write(self):
		'''Save xml with index info artifacts to save_dir.'''
		fout = open(self.filename,'w')
		fout.write(etree.tostring(self.snippets, pretty_print=True).decode())
		fout.close()

	def read(self):
		'''Read index info and selection xml into object.'''
		self.snippets = etree.fromstring(open(self.filename).read())

	
def make_filename(w,save_dir = None, identifier = ''):
	if save_dir:
		return save_dir + identifier + '_' + w.name + '_snippets.xml'
	else:
		return path.snippet_annotation+ w.name + '_snippets.xml'

def get_snippet_epoch_id(increment = False):
	'''Read and optionally increment cnn epoch id for the bad epoch generated based on cnn predictions.'''
	n = int(open(path.data +'snippet_epoch_id').read())
	if increment:
		fout = open(path.data + 'snippet_epoch_id','w')
		fout.write(str(n+1))
		fout.close()
	return n

def load_index_info(w = None, filename = None):
	x = xml_snippets()
	if w != None: 
		x.w = w
		x.filename = make_filename(w)
	elif filename != None: x.filename =filename
	x.read()
	x.xml2index_info()
	return x
