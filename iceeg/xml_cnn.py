import bad_epoch
from lxml import etree
import numpy as np
import os
import path
import random
import time

class xml_cnn:
	'''Load all predictions generated by the cnn and link them to the snippet indices of a window object.
	write bad epoch xml to ARTIFACT_DATA_ALL_PP folder.
	IMPORTANT: block start sample are the sample numbers in sf1000, bad epoch st and et sample are in sf 100
	'''
	def __init__(self,w=None,select_nartifact = 100,select_nclean = 100,cnn_model_name = 'unk',load_dir = None,bad_epochs = [],filename = ''):
		'''Writes artifact info generated with manual_artifact_coder to xml files

		w 			windower object
		select_n.. 	select subset of artifacts
		select_n.. 	select subset of clean
		cnn_model.. name of the cnn model that generated the predictions
		load_dir 	directory to load data from
		bad_epochs 	a list of bad_epoch objects, can be empty
		filename 	xml filename, for loading or writing
		'''
		self.w= w
		self.select_nartifact = select_nartifact
		self.select_nclean= select_nclean
		self.cnn_model_name = cnn_model_name
		if load_dir == None: self.load_dir = path.artifact_data_all_pp 
		elif not os.path.isdir(load_dir):
			print('Could not locate:',load_dir,'using default:',path.artifact_data_all_pp)
			self.load_dir = path.artifact_data_all_pp
		else : self.load_dir = load_dir
		if self.w !=None:
			self.filename = make_filename(w)
			self.get_predictions()
			self.set_indices()
		else:
			self.bad_epochs = bad_epochs
			self.filename = filename
		# self.make_index_info()


	def __str__(self):
		return etree.tostring(self.cnn_result, pretty_print=True).decode()


	def get_predictions(self):
		'''Load np matrices rows: number of snippets, columns: clean -artifact (one-hot).'''
		self.d = np.load(self.load_dir + self.w.name + '_pred.npy')
		self.pred_perc = np.load(self.load_dir + self.w.name + '_pred-prec.npy')


	def set_indices(self):
		'''Set indices (=snippets) to clean or artifact.'''
		self.clean_indices = np.where(self.d[:,0]==1)[0]
		self.artifact_indices = np.where(self.d[:,1]==1)[0]

		self.nclean_indices = len(self.clean_indices)
		self.nartifact_indices = len(self.artifact_indices)


	def make_index_info(self):
		'''Adds indices (=snippets) from the w object to the xml tree.'''
		self.cnn_result = etree.Element('cnn_result')
		ii_xml = etree.SubElement(self.cnn_result, 'index_info',id = self.w.name)

		self.nclean = str(self.nclean_indices)
		self.nartifact = str(self.nartifact_indices)

		# set epoch info elements
		elements = 'nclean,nartifact,block_st_sample,pp_id,exp_type,bid,coder'.split(',')
		evalues = [self.nclean,self.nartifact,str(self.w.st_sample), str(self.w.pp_id), self.w.exp_type, str(self.w.bid), self.cnn_model_name]
		for i,e in enumerate(elements):
			element = etree.SubElement(ii_xml, e)
			element.text = evalues[i]

	def xml2index_info(self):
		'''Adds indices (=snippets) from the w object to the xml tree.'''

		ii_xml = self.cnn_result.find('index_info')
		element_names = 'nclean,nartifact,block_st_sample,pp_id,exp_type,bid,coder'.split(',')
		for e in element_names:
			if ii_xml.find(e) != None:
				setattr(self,e,ii_xml.find(e).text)
			else:
				setattr(self,e,'NA')


	def make_selection(self, idn = 1, exclude = None):
		'''Select a subset of clean and artifact indices, default 100 100.'''
		if exclude != None: 
			clean_indices = np.setdiff1d(self.clean_indices,exclude)
			artifact_indices = np.setdiff1d(self.artifact_indices,exclude)
		else:
			clean_indices, artifact_indices = self.clean_indices, self.artifact_indices

		if len(artifact_indices) < self.select_nartifact: self.select_nartifact = len(artifact_indices)
		if len(clean_indices) < self.select_nclean: self.select_nclean = len(clean_indices)

		self.artifact_selection = random.sample(list(artifact_indices),self.select_nartifact)
		self.clean_selection = random.sample(list(clean_indices),self.select_nclean)
		self.selection = self.clean_selection + self.artifact_selection
		random.shuffle(self.selection)
	
		s_xml = etree.SubElement(self.cnn_result, 'selection',id = str(idn))
		selection = ','.join(map(str,self.selection))
		elements='selection_indices,nclean,nartifact,nselection'.split(',')
		evalues = [selection,str(self.select_nclean),str(self.select_nartifact),str(len(self.selection))]
		for i,e in enumerate(elements):
			element = etree.SubElement(s_xml, e)
			element.text = evalues[i]


	def last_selection_id(self):
		'''Return id of last indices selection.
		Xml file contains selection nodes with indices, multiple selections are possible and each nummbered consecutively.
		'''
		id_number = 0
		for selection in self.cnn_result.iter('selection'):
			print(selection.text,1)
			n = int(selection.attrib['id'])
			if n > id_number: id_number = n
		self.last_selection_id = str(n)
		return str(n)
			

	def get_selection(self,load_data = True,selection_id = None):
		'''Get indices of selection with provided selection_id, default is latest selection (highest selection id).
		'''
		self.bad_epochs = []
		if load_data: self.read()
		else: print('Starting with list of',len(self.cnn_result),' epochs')

		if selection_id == None:
			selection_id = self.last_selection_id()
		for temp in self.cnn_result.iter('selection'):
			if temp.attrib['id'] == selection_id:
				selection = temp
				break
		indices = selection.find('selection_indices').text
		self.selection_indices = map(int,indices.split(','))


	def get_index_info(self):
		'''Load index info into the object.
		Index_info contains information about participant experiment type and block number and block start number.
		'''
		self.index_info = self.cnn_result.find('index_info')
		# fetch subelements
		element_names = 'nclean,nartifact,block_st_sample,pp_id,bid,exp_type,coder'.split(',')
		for e in element_names:
			print(self.index_info.find(e),e)
			setattr(self,e, self.index_info.find(e).text )


	def make_bad_epoch(self):
		'''Create a list of bad epochs from xml file.'''
		self.bad_epochs = []
		self.get_selection()
		self.get_index_info()
		ws = self.w.windows['sf100']
		for index in self.selection_indices:
			#create start and end boundary
			st_sample, et_sample = ws.start_snippets[index], ws.end_snippets[index]
			start = bad_epoch.Boundary(x = int(st_sample),boundary_type='start',visible = False)
			end = bad_epoch.Boundary(x = int(et_sample),boundary_type='end',visible = False)
			if index in self.clean_indices: annotation = 'clean'
			elif index in self.artifact_indices: annotation = 'artifact'
			else: raise ValueError(index,'not in clean_indices or artifact_indices')
			perc_clean = self.pred_perc[index,0]
			epoch_id = get_cnn_epoch_id(increment = True)
			# create bad epoch
			be = bad_epoch.Bad_epoch(start_boundary = start, end_boundary = end, annotation = annotation ,pp_id = self.pp_id, exp_type = self.exp_type, bid = self.bid,block_st_sample = self.block_st_sample,epoch_id = epoch_id,coder = self.coder, correct = 'unk',visible = False ,perc_clean = perc_clean)
			self.bad_epochs.append(be)
		return self.bad_epochs


	def bad_epochs2xml(self):
		'''Create xml file from bad_epochs, adapted from xml_handler, '''
		self.artifacts = etree.Element('artifacts')
		for be in self.bad_epochs:
			if not be.ok:
				pass
			be_xml = etree.SubElement(self.artifacts, 'bad_epoch', id = str(be.epoch_id))
			# set epoch info elements
			elements = 'st_sample,et_sample,duration,block_st_sample,pp_id,exp_type,bid,color,coder,correct,annotation,note,correct,corrector,perc_clean'.split(',')
			for e in elements:
				element = etree.SubElement(be_xml, e)
				if hasattr(be,e):
					element.text = str(getattr(be,e))
				else:
					element.text = 'NA'


	def xml2bad_epochs(self):
		'''Create a list of bad epochs from xml file.'''
		self.bad_epochs = []
		print('Starting with list of',len(self.artifacts),' bad epochs')
		for be_xml in self.artifacts.iter('bad_epoch'):
			# fetch subelements
			element_names = 'st_sample,et_sample,block_st_sample,pp_id,bid,annotation,color,exp_type,coder,note,correct,corrector,perc_clean'.split(',')
			element_values = []
			for e in element_names:
				if be_xml.find(e) != None:
					element_values.append(be_xml.find(e).text)
				else:
					element_values.append('NA')
			st_sample,et_sample,block_st_sample,pp_id,bid,annotation,color,exp_type,coder,note,correct,corrector,perc_clean= element_values
			epoch_id = be_xml.attrib['id']
			#create start and end boundary
			start = bad_epoch.Boundary(x = int(st_sample),boundary_type='start',visible = False)
			end = bad_epoch.Boundary(x = int(et_sample),boundary_type='end',visible = False)
			# create bad epoch
			be = bad_epoch.Bad_epoch(start_boundary = start, end_boundary = end, annotation = annotation, color = color,pp_id = pp_id, exp_type = exp_type, bid = bid,block_st_sample = block_st_sample,epoch_id = epoch_id, visible = False ,correct = correct,perc_clean = perc_clean)
			self.bad_epochs.append(be)
		print('N bad epoch:',len(self.artifacts),'artifacts')
		return self.bad_epochs


	def write_bad_epoch_xml(self):
		''' Save bad_epoch xml to ARTIFACT_DATA_ALL_PP'''
		self.artifacts_filename = self.filename.replace('index-info','artifacts-sf100')
		fout = open(self.artifacts_filename,'w')
		fout.write(etree.tostring(self.artifacts, pretty_print=True).decode())
		fout.close()


	def read_bad_epoch_xml(self,filename = ''):
		'''Read bad_epoch_xml.'''
		if filename != '': self.artifacts_filename = filename
		else: self.artifacts_filename = self.filename.replace('index-info','artifacts-sf100')
		self.artifacts= etree.fromstring(open(self.artifacts_filename).read())


	def make_time(self):
		self.cdate = time.time()
		self.date = time.strftime("%b-%d-%Y-%H-%M-%S", time.localtime(self.cdate))


	def write_update(self):
		'''Writes data to xml file and moves a copy of the previous version to folder OLD'''
		self.make_time()
		if os.path.isfile(self.filename): 
			print('moving file:','mv ' + self.filename +  ' ' + path.artifact_data_all_pp + 'OLD/' + self.filename.split('/')[-1].strip('.xml') + '_'+self.date + '.xml')
			os.system('mv ' + self.filename +  ' ' + path.artifacts + 'OLD/' + self.filename.split('/')[-1].rstrip('.xml') + '_'+self.date + '.xml')
		fout = open(self.filename,'w')
		fout.write(etree.tostring(self.artifacts, pretty_print=True).decode())
		fout.close()


	def write(self):
		'''Save xml with index info and selection object to ARTIFACT_DATA_ALL_PP.'''
		fout = open(self.filename,'w')
		fout.write(etree.tostring(self.cnn_result, pretty_print=True).decode())
		fout.close()

	def read(self):
		'''Read index info and selection xml into object.'''
		self.cnn_result = etree.fromstring(open(self.filename).read())

	
def make_filename(w):
	return path.artifact_data_all_pp + w.name + '_index-info.xml'

def get_cnn_epoch_id(increment = False):
	'''Read and optionally increment cnn epoch id for the bad epoch generated based on cnn predictions.'''
	n = int(open(path.data +'cnn_epoch_id').read())
	if increment:
		fout = open(path.data + 'cnn_epoch_id','w')
		fout.write(str(n+1))
		fout.close()
	return n

def load_index_info(w = None, filename = None):
	x = xml_cnn()
	if w != None: 
		x.w = w
		x.filename = make_filename(w)
	elif filename != None: x.filename =filename
	x.read()
	x.xml2index_info()
	return x
